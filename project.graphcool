# project: cj41c9u2zddol0177la66g30g
# version: 101

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  subscription: Subscription @relation(name: "SubscriptionOnUser")
  email: String!
  phoneNumber: String
  nickname: String!
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  userId: String!
  picture: String!
  reservations: [Reservation!]! @relation(name: "UserOnReservation")
  companions: [Companion!]! @relation(name: "UserOnCompanion")
  auth0UserId: String @isUnique
}

type Companion implements Node {
  fullName: String!
  birthDate: DateTime!
  legalId: String
  createdAt: DateTime!
  phoneNumber: String
  id: ID! @isUnique
  updatedAt: DateTime!
  reservations: [Reservation!]! @relation(name: "CompanionsOnReservation")
  companionOwner: User @relation(name: "UserOnCompanion")
}

type MediaFile implements Node {
  url: String! @isUnique
  filename: String
  mimetype: String
  id: ID! @isUnique
  client: String
  size: Int
  isWriteable: String
  createdAt: DateTime!
  updatedAt: DateTime!
  handle: String
  source: String
  status: String
}

type Area implements Node {
  name: String!
  distributors: [Distributor!]! @relation(name: "DistributorOnArea")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  activities: [Activity!]! @relation(name: "ActivitiesOnArea")
  formatedAddress: String
  lat: Float
  lng: Float
  mainPhoto: Json
  subPhotos: [Json!]
  description: String
  howToReachLocationExplanation: String
  countryLongName: String
  countryShortName: String
  localityShortName: String
  localityLongName: String
  administrativeAreaLevel1LongName: String
  administrativeAreaLevel1ShortName: String
  administrativeAreaLevel2LongName: String
  administrativeAreaLevel2ShortName: String
  administrativeAreaLevel3LongName: String
  administrativeAreaLevel3ShortName: String
  administrativeAreaLevel4LongName: String
  administrativeAreaLevel4ShortName: String
}

type Distributor implements Node {
  name: String!
  sellers: [Seller!]! @relation(name: "SellerOnDistributor")
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  activities: [Activity!]! @relation(name: "ActivityOnDistributor")
  areas: [Area!]! @relation(name: "DistributorOnArea")
  phoneNumber: String
  contactExplanation: String
}

type Seller implements Node {
  fullName: String
  code: String
  phoneNumber: String
  email: String
  distributor: Distributor! @relation(name: "SellerOnDistributor")
  cards: [DiscountCard!]! @relation(name: "DiscountCardOnSeller")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  contactExplanation: String
}

type DiscountCard implements Node {
  used: Boolean!
  code: String!
  seller: Seller @relation(name: "DiscountCardOnSeller")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Activity implements Node {
  distributor: Distributor @relation(name: "ActivityOnDistributor")
  name: String!
  id: ID! @isUnique
  description: String
  shortDescription: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  lat: Float
  lng: Float
  formattedAddress: String
  howToReachLocationExplanation: String
  area: Area @relation(name: "ActivitiesOnArea")
  reservations: [Reservation!]! @relation(name: "ReservationsOnActivity")
  category: Category @relation(name: "ActivityOnCategory")
  mainPhoto: Json!
  subPhotos: [Json!]
  communicationExplanation: String
  finishAt: String!
  startsAt: String
  scheduleExplanation: String
  departureExplanation: String
  pickUpLocations: [PickUpLocation!]! @relation(name: "ActivityOnPickUpLocation")
  rates: [Rate!]! @relation(name: "ActivityOnRate")
  countryLongName: String
  countryShortName: String
  localityShortName: String
  localityLongName: String
  administrativeAreaLevel1LongName: String
  administrativeAreaLevel1ShortName: String
  administrativeAreaLevel2LongName: String
  administrativeAreaLevel2ShortName: String
  administrativeAreaLevel3LongName: String
  administrativeAreaLevel3ShortName: String
  administrativeAreaLevel4LongName: String
  administrativeAreaLevel4ShortName: String
  neighborhoodLongName: String
  neightborhoodShortName: String
  subLocalityShortName: String
  subLocalityLongName: String
  routeShortName: String
  routeLongName: String
  streetNumberShortName: String
  streetNumberLongName: String
}

type Rate implements Node {
  originalPrice: Float
  discountPrice: Float
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  pendingForApproval: Boolean
  isActive: Boolean
  amenitiesDescription: String!
  discountType: DiscountTypeEnum!
  discountPercentage: Float
  currency: String!
  name: String!
  activity: Activity @relation(name: "ActivityOnRate")
}

type Subscription implements Node {
  subscriptor: User @relation(name: "SubscriptionOnUser")
  validity: DateTime!
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  kids: Int
  adults: Int!
  type: String
}

type Reservation implements Node {
  owner: User @relation(name: "UserOnReservation")
  companions: [Companion!]! @relation(name: "CompanionsOnReservation")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  fee: Float!
  activity: Activity @relation(name: "ReservationsOnActivity")
  executionDate: DateTime
  executionTime: String
  ownerComments: String
}

type Category implements Node {
  name: String!
  picture: String!
  description: String
  activities: [Activity!]! @relation(name: "ActivityOnCategory")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type PickUpLocation implements Node {
  lat: Float!
  lng: Float!
  name: String
  mainPhoto: [Json!]
  subPhotos: [Json!]
  howToReachLocationExplanation: String
  formattedAddress: String
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  departureFrequency: String
  departureTimes: [String!]
  activities: [Activity!]! @relation(name: "ActivityOnPickUpLocation")
  countryLongName: String
  countryShortName: String
  localityShortName: String
  localityLongName: String
  administrativeAreaLevel1LongName: String
  administrativeAreaLevel1ShortName: String
  administrativeAreaLevel2LongName: String
  administrativeAreaLevel2ShortName: String
  administrativeAreaLevel3LongName: String
  administrativeAreaLevel3ShortName: String
  administrativeAreaLevel4LongName: String
  administrativeAreaLevel4ShortName: String
  neighborhoodLongName: String
  neighborhoodShortName: String
  subLocalityShortName: String
  subLocalityLongName: String
  routeShortName: String
  routeLongName: String
  streetNumberShortName: String
  streetNumberLongtName: String
}

enum DiscountTypeEnum {
  Percentage
  Absolute
}